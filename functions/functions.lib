##FUNCTIONS LIBRARY

logger() {
  # Print logs to the stdout.
  # message
  echo "["$0"]" $(date -u +"%Y-%m-%dT%H:%M:%SZ") $1
}


getPackages() {

	if [ $# != 1 ]
	then
		echo
		logger "Invalid number of arguments for get packages"
		exit 1
	fi

	if [ -z "$1" ] 
	then
		echo
		logger "Invalid environment for getPackages Function"		
		exit 1		
	else	
		logger "this is the env:  $1"	
	        packages="http://"$1":32002/api/v3/packages"
		#echo $packages
		Result=$(curl -s "$packages" > /dev/null)
		#echo $Result
		logger "Get packages finished"
	fi
}

uploadPackage() {
	if [ $# != 2 ]
	then
		echo
		logger "Invalid number of arguments for upload package"
		exit 1
	fi
	if [ -z "$1" ]
	then
		echo
		logger "Invalid environment for uploadPackage Function"		
		exit 1
	
	elif  [ ! -f "$2" ]
		then	
		echo
		logger "Cannot find the file for uploadPackage Function"		
		exit 1
	else				
		       #echo $1
		       #echo $2
		       upload="http://"$1":32002/api/v3/packages"
		       Result=$(curl -s -v -i -X POST  -F "package=@./$2" ""$upload"" 2>&1 /dev/null)
	       	       #echo $Result
			logger "Upload package finished"	
	fi
}




getServices() {
	echo "this is the env: " $1
	services="http://"$1":32002/api/v3/services"
	echo $services
	Result=$(curl ""$services"")
	echo $Result



}

getPolicies() {
	echo "this is the env: " $1
	policies="http://"$1":32002/api/v3/policies"
	echo $policies
	Result=$(curl ""$policies"")
	echo $Result
}

getSlas() {
	echo
	slas=$(awk '/upload_sla_template/ {print $2}' envfile.yml)
	echo $slas
	Result=$(curl ""$slas"")
	echo $Result
}




upload_policy() {
	
	########policy 
	upload=$(awk '/upload_policy/ {print $2}' envfile.yml)
	echo $upload
	
	# Create a new policy
	echo '------------------'
	echo 'Create a new policy'
	echo '------------------'
	
	Result=$(curl -X POST \
	  $upload \
	  -H 'cache-control: no-cache' \
	  -H 'content-type: application/json' \
	  -d '{"descriptor_schema": "https://raw.githubusercontent.com/sonata-nfv/tng-schema/master/policy-descriptor/policy-schema.yml","name": "samplepolicydemo123456","vendor": "tango","version": "0.2","network_service": {"vendor":"tango","name":"default-nsd","version": "0.9"},"policyRules": [{"name": "actionUponAlert1","salience": 1,"inertia":{"value": 30,"duration_unit": "m"},"conditions": {"condition": "AND","rules": [{"id":"vnf1.LogMetric","field":"vnf1.LogMetric","type": "string","input": "text","operator":"equal","value":"mon_rule_vm_cpu_perc"}]},"actions": [{"action_object":"ComponentResourceAllocationAction","action_type": "InfrastructureType","name": "ApplyFlavour","value": "3","target": "vnf1"}]},{"name": "highTranscodingRateRule","salience": 1,"inertia": {"value": 30,"duration_unit":"m"},"duration": {"value": 10,"duration_unit": "m"},"aggregation":"avg","conditions": {"condition":"AND","rules": [{"id": "vnf1.CPULoad","field": "vnf1.CPULoad","type": "double","input": "number","operator": "greater","value": "70"},{"id": "vnf2.RAM","field": "vnf2.RAM","type":"integer","input": "select","operator":"less","value": "8"}]},"actions":[{"action_object":"ComponentResourceAllocationAction","action_type":"InfrastructureType","name":"ApplyFlavour","value":"3","target": "vnf1"}]}]}'
	)
	
	echo 'Result'
}

instantiate_ns (){
	#instantiating the NS
	instantiate=$(awk '/instantiate_ns/ {print $2}' envfile.yml)
	echo $instantiate	
	echo
	requesting="curl -v -i -H content-type:application/json -X POST ""$instantiate""  -d {"\"service_uuid"\":""$1""}"
	echo
	echo "this is the requesting curl:" 
	echo $requesting
	echo
	#instantiating=$(curl -v -i -H content-type:application/json -X POST ""$instantiate""  -d '{"\"service_uuid"\":""$1""}')
	instantiating=$($requesting)
	echo $instantiating
}


